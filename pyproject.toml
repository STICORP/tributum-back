[project]
name = "tributum"
version = "0.2.0"
description = "Fiscal Intelligence"
readme = "README.md"
requires-python = ">=3.13"
license = { text = "Proprietary" }
authors = [
    { name = "Daniel Jorge", email = "daniel.jorge@sticorp.com.br" },
]
maintainers = [
    { name = "Daniel Jorge", email = "daniel.jorge@sticorp.com.br" },
]
keywords = ["financial", "tax", "payment", "fastapi", "private"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Private :: Do Not Upload",
    "Framework :: FastAPI",
    "Typing :: Typed",
]
dependencies = [
    "fastapi>=0.115.12",
    "pydantic-settings>=2.9.1",
    "structlog>=25.4.0",
    "orjson>=3.10.18",
    "python-multipart>=0.0.20",
]

[project.urls]
"Homepage" = "https://github.com/daniel-jorge/tributum-back"
"Repository" = "https://github.com/daniel-jorge/tributum-back"
"Bug Tracker" = "https://github.com/daniel-jorge/tributum-back/issues"
"Changelog" = "https://github.com/daniel-jorge/tributum-back/blob/main/CHANGELOG.md"

[dependency-groups]
dev = [
    "ruff>=0.11.13",
    "pre-commit>=4.2.0",
    "mypy>=1.16.0",
    "bandit[toml]>=1.8.3",
    "safety>=3.5.2",
    "pip-audit>=2.9.0",
    "semgrep>=1.125.0",
    "uvicorn>=0.34.3",
    "pytest>=8.4.0",
    "pytest-cov>=6.2.1",
    "pytest-asyncio>=1.0.0",
    "httpx>=0.28.1",
    "pytest-xdist>=3.6.1",
    "pytest-timeout>=2.4.0",
    "pytest-rich>=0.2.0",
    "vulture>=2.14",
    "pydoclint>=0.6.6",
    "pylint>=3.3.7",
    "bump-my-version>=0.32.0",
]

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    # Core Python style and errors
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "UP",     # pyupgrade

    # Import management
    "I",      # isort
    "TID",    # flake8-tidy-imports
    "ICN",    # flake8-import-conventions
    "TCH",    # flake8-type-checking

    # Naming and documentation
    "N",      # pep8-naming
    "D",      # pydocstyle

    # Type checking
    "ANN",    # flake8-annotations

    # Code quality
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "ISC",    # flake8-implicit-str-concat
    "PIE",    # flake8-pie
    "SIM",    # flake8-simplify
    "RET",    # flake8-return
    "ARG",    # flake8-unused-arguments
    "ERA",    # eradicate (commented code)

    # Security and error handling
    "BLE",    # flake8-blind-except
    "TRY",    # tryceratops (exception handling)
    "RSE",    # flake8-raise

    # Performance
    "PERF",   # perflint (performance)

    # Specific domains
    "ASYNC",  # flake8-async
    "DTZ",    # flake8-datetimez
    "PT",     # flake8-pytest-style
    "LOG",    # flake8-logging

    # Code smells and refactoring
    "FBT",    # flake8-boolean-trap
    "FLY",    # flynt (f-string formatting)
    "FURB",   # refurb (refactoring)
    "PL",     # pylint

    # Development and debugging
    "T10",    # flake8-debugger
    "EXE",    # flake8-executable

    # Ruff-specific
    "RUF",    # Ruff-specific rules
]
ignore = [
    # Only ignore conflicting pydocstyle conventions
    "D203",   # 1 blank line required before class docstring (conflicts with D211)
    "D213",   # Multi-line docstring summary should start at the second line (conflicts with D212)
    "D107",   # Missing docstring in __init__ (pydoclint wants these in class docstring)
    # Other non-docstring related ignores
    "ANN401", # Dynamically typed expressions (Any) are disallowed
    "BLE001", # Do not catch blind exception (we'll be selective about this)
    "TRY003", # Avoid specifying long messages outside the exception class
    "PLR0913", # Too many arguments to function call
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["tributum"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Be permissive with third-party libraries
ignore_missing_imports = true
follow_imports = "silent"
follow_imports_for_stubs = true

# Project-specific strictness
[[tool.mypy.overrides]]
module = "tributum.*"
ignore_missing_imports = false
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false

# Per-module options for specific third-party libraries if needed
[[tool.mypy.overrides]]
module = "tests.*"
# Allow more flexibility in tests
disallow_untyped_decorators = false
disallow_any_generics = false

[[tool.mypy.overrides]]
module = "pydantic_settings"
ignore_missing_imports = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "PLR2004",  # Magic values are OK in tests
    "TRY002",   # Creating generic exceptions is OK in tests
    "TRY301",   # Raising exceptions in tests is OK
]

[tool.bandit]
targets = ["src/", "main.py"]
exclude_dirs = ["tests", "venv", ".venv"]
skips = []
# Severity: LOW, MEDIUM, HIGH
severity = "LOW"
# Confidence: LOW, MEDIUM, HIGH
confidence = "LOW"
# Maximum number of lines to show for each issue
max-lines = 5
# Format: json, csv, txt, yaml, html, xml
format = "txt"
# Verbose output
verbose = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-fail-under=80",
    "--timeout=10",
    "--rich",
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.vulture]
paths = ["src", "tests", "main.py", "vulture_whitelist.py"]
exclude = ["htmlcov/", "*.egg-info/", "build/", "dist/", ".venv/", "venv/"]
min_confidence = 80
ignore_decorators = ["@app.route", "@pytest.fixture", "@pytest.mark.*"]
ignore_names = ["test_*", "_*"]
sort_by_size = true

[tool.pydoclint]
style = "google"  # Matches your Ruff pydocstyle convention
arg-type-hints-in-docstring = false  # Don't require type hints in docstrings (they're in signatures)
check-class-attributes = true
check-protected-class-methods = true
# All other checks are enabled by default

[tool.pylint.messages_control]
disable = "all"
enable = ["redefined-outer-name"]

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "ok"]

[tool.pylint.format]
max-line-length = 88  # Match Ruff's line length

[tool.bumpversion]
current_version = "0.2.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Release version v{new_version}"
allow_dirty = false
commit = true
message = "chore: bump version from {current_version} to {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "src/core/config.py"
search = 'app_version: str = Field(default="{current_version}"'
replace = 'app_version: str = Field(default="{new_version}"'
regex = false

[[tool.bumpversion.files]]
filename = "VERSION"
search = "{current_version}"
replace = "{new_version}"
