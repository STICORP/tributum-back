[project]
name = "tributum"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "fastapi>=0.115.12",
]

[dependency-groups]
dev = [
    "ruff>=0.11.13",
    "pre-commit>=4.2.0",
    "mypy>=1.16.0",
    "bandit[toml]>=1.8.3",
    "safety>=3.5.2",
    "pip-audit>=2.9.0",
    "semgrep>=1.125.0",
    "uvicorn>=0.34.3",
    "pytest>=8.4.0",
    "pytest-cov>=6.2.1",
    "pytest-asyncio>=1.0.0",
    "httpx>=0.28.1",
    "pytest-xdist>=3.6.1",
    "pytest-timeout>=2.4.0",
    "pytest-rich>=0.2.0",
    "vulture>=2.14",
    "interrogate>=1.7.0",
]

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "RUF",    # Ruff-specific rules
]
ignore = [
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["tributum"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Be permissive with third-party libraries
ignore_missing_imports = true
follow_imports = "silent"
follow_imports_for_stubs = true

# Project-specific strictness
[[tool.mypy.overrides]]
module = "tributum.*"
ignore_missing_imports = false
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false

# Per-module options for specific third-party libraries if needed
[[tool.mypy.overrides]]
module = "tests.*"
# Allow more flexibility in tests
disallow_untyped_decorators = false
disallow_any_generics = false

[tool.bandit]
targets = ["src/", "main.py"]
exclude_dirs = ["tests", "venv", ".venv"]
skips = []
# Severity: LOW, MEDIUM, HIGH
severity = "LOW"
# Confidence: LOW, MEDIUM, HIGH
confidence = "LOW"
# Maximum number of lines to show for each issue
max-lines = 5
# Format: json, csv, txt, yaml, html, xml
format = "txt"
# Verbose output
verbose = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-fail-under=80",
    "--timeout=10",
    "--rich",
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.vulture]
paths = ["src", "tests", "main.py", "vulture_whitelist.py"]
exclude = ["htmlcov/", "*.egg-info/", "build/", "dist/", ".venv/", "venv/"]
min_confidence = 80
ignore_decorators = ["@app.route", "@pytest.fixture", "@pytest.mark.*"]
ignore_names = ["test_*", "_*"]
sort_by_size = true

[tool.interrogate]
ignore-init-method = false
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "htmlcov", "tests"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
style = "google"  # Matches your Ruff pydocstyle convention
verbose = 1
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
generate-badge = "."
badge-format = "svg"
